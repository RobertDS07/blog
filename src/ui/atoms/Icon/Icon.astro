---
import type { HTMLAttributes } from "astro/types";
import fs from "fs";

import ClockIcon from "@public/icons/clock.svg";
import EyeIcon from "@public/icons/eye.svg";
import HeartIcon from "@public/icons/heart.svg";
import JobIcon from "@public/icons/job.svg";
import PaperIcon from "@public/icons/paper.svg";

export type IconTypes = "job" | "eye" | "clock" | "paper" | "heart";

interface Props extends Pick<HTMLAttributes<"svg">, "class"> {
  type: IconTypes;
}

const { type, ...svgAttributes } = Astro.props;

const getIconPath = () => {
  switch (type) {
    case "clock":
      return ClockIcon;
    case "job":
      return JobIcon;
    case "eye":
      return EyeIcon;
    case "heart":
      return HeartIcon;
    case "paper":
      return PaperIcon;
    default:
      throw new Error("Icon not found for type: " + type);
  }
};

const putClassInSvgText = (svgHtmlInText: string) => {
  const svgStringWithClass = svgHtmlInText.replace(
    "<svg ",
    `<svg class='${svgAttributes.class}'`
  );

  return svgStringWithClass;
};

const getSvgHtmlInText = () => {
  const iconPath = getIconPath();

  try {
    const svgString = fs.readFileSync(`${process.cwd()}${iconPath}`, "utf-8");

    return svgString;
  } catch (error) {
    return "";
  }
};

const getSvgHtml = () => {
  const svgHtmlInText = getSvgHtmlInText();

  const svgHtmlInTextWithClass = putClassInSvgText(svgHtmlInText);

  return svgHtmlInTextWithClass;
};
---

<Fragment set:html={getSvgHtml()} />
